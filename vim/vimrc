function Main()
  call SetOptions()
  call SetupKeyboardMapping()
  call SetupCustomCommands()
  call SetupVimPlug()
  call plug#begin()
  call SetupTheme()
  call SetupIndent()
  call SetupNerdtree()
  call SetupFZF()
  call SetupHexEditing()
  call plug#end()
endfunction

function SetOptions()
  set nocompatible
  set novisualbell
  set backspace=indent,eol,start
  set whichwrap+=<,>,h,l,[,]
  set number              
  set wrap!                
  set encoding=utf-8     
  set wildmenu
  set showmatch
  set ruler  
  set incsearch
  set hlsearch
  set linebreak
  set nolist 
  set history=10000
  set textwidth=0
  set wrapmargin=0 
  set ignorecase
  set smartcase
  set laststatus=0
  set ttymouse=sgr
  set mouse=a
  set splitright
  set noswapfile
  set autoread
  set foldmethod=indent
  set foldlevel=10
  set cindent
  set tabstop=2
  set softtabstop=2
  set shiftwidth=2
  set expandtab
  set autoindent
  set cursorline
  set matchtime=0
  au CursorHold * checktime  
  let &winwidth = &columns * 7 / 10
endfunction

function SetupKeyboardMapping()
  noremap <silent> <CR> :nohlsearch<CR>
  noremap <silent> <expr> <C-b> exists("g:NERDTree") && g:NERDTree.IsOpen() ? ":NERDTreeClose<CR>" : ":NERDTreeToggle<CR><c-w><c-p>:NERDTreeFind<CR>"
  noremap <silent> <C-p> :GFiles<CR> 
  noremap \ :w!<CR>:RunExternal <UP><CR>
endfunction

function SetupCustomCommands()
  command Config :e ~/.config/vim/vimrc
  command -nargs=1 RunExternal call Command_RunExternal(<f-Args>)
  function! Command_RunExternal(command)
    execute "vert term " . a:command

    map <buffer> <C-c> "*y
    map <buffer> j <C-e>
    map <buffer> k <C-y>
    map <buffer> <silent> <ESC> :close<CR>
    map <buffer> <silent> <CR> :close<CR>
  endfunction 
endfunction

function SetupTheme()
  Plug 'tomasr/molokai'

  function Theme_OnVimEnter()
    syntax on
    filetype plugin indent on
    colorscheme molokai 

    hi EndOfBuffer ctermfg=black guifg=black
    hi CursorColumn ctermbg=NONE
    hi LineNr ctermbg=NONE
    hi CursorLineNr cterm=bold 
    "hi SignColumn guibg=NONE ctermbg=NONE
    "hi TabLine ctermbg=grey ctermfg=black guibg=#1f2430
    "hi TabLineSel ctermbg=black ctermfg=white guibg=white guifg=black
    "hi TabLineFill ctermfg=black guifg=black
    "hi Visual cterm=none ctermbg=darkgrey ctermfg=white
    "hi Search cterm=none ctermbg=darkgrey ctermfg=white
    "hi MatchParen ctermfg=white ctermbg=darkgrey
    "hi LineNr ctermfg=yellow
  endfunction

  autocmd VimEnter * call Theme_OnVimEnter()
endfunction

function SetupIndent()
  Plug 'ciaranm/detectindent'
  Plug 'townk/vim-autoclose'
endfunction

function SetupNerdtree()
  Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle'  } 

  let g:NERDTreeMinimalUI = 1
  let g:NERDTreeDirArrowExpandable = ''
  let g:NERDTreeQuitOnOpen = 1
  let g:NERDTreeMapHelp = 'H'
endfunction

function SetupFZF()
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
endfunction

function SetupHexEditing()
  augroup Binary
    au!
    au BufReadPre  *.bin let &bin=1
    au BufReadPost *.bin if &bin | %!xxd
    au BufReadPost *.bin set ft=xxd | endif
    au BufWritePre *.bin if &bin | %!xxd -r
    au BufWritePre *.bin endif
    au BufWritePost *.bin if &bin | %!xxd
    au BufWritePost *.bin set nomod | endif
  augroup END
endfunction

function SetupVimPlug()
  let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
  if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    execute 'source ' data_dir.'/autoload/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
endfunction

call Main()

""""""""""""""""""""""
"" Ale 
""""""""""""""""""""""
"let g:ale_completion_enabled = 1
"let g:ale_sign_error = 'x'
"let g:ale_sign_warning = ' ÔÅ±'
"
"""""""""""""""""""""""
"" Ctrlp 
"""""""""""""""""""""""
"let g:ctrlp_match_window = 'top,order:btt,min:1,max:10,results:10'
"let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -c --exclude-standard --recurse-submodules | grep -x -v "$( git ls-files -d --exclude-standard )" ; git ls-files -o --exclude-standard', 'find %s -type f' ]
"let g:ctrlp_prompt_mappings = { 'AcceptSelection("e")': ['<2-LeftMouse>'], 'AcceptSelection("t")': ['<cr>'], }
